# model/trainer.py
import os
import joblib
import logging
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


class ModelTrainer:
    def __init__(self, trainer_type="base", logger: logging.Logger = None, save_dir="outputs/models"):
        """
        trainer_type: "base" (default sklearn LogisticRegression)
        """
        self.trainer_type = trainer_type
        self.logger = logger or logging.getLogger(__name__)
        self.model = None
        self.save_dir = save_dir
        os.makedirs(self.save_dir, exist_ok=True)

    # ==============================================================
    # Train model
    # ==============================================================
    def train(self, X_train, y_train, X_valid=None, y_valid=None):
        """
        Train model. Jika X_valid, y_valid tersedia â†’ bisa digunakan
        untuk validasi atau tuning di masa depan.
        """
        self.logger.info(f"Training model (type={self.trainer_type})")

        if self.trainer_type == "base":
            self.model = LogisticRegression(max_iter=1000, random_state=42)
            self.model.fit(X_train, y_train)
        else:
            raise ValueError(f"Unknown trainer_type: {self.trainer_type}")

        self.logger.info("Training completed")
        return self.model

    # ==============================================================
    # Prediction
    # ==============================================================
    def predict(self, X):
        if not self.model:
            raise ValueError("Model belum dilatih atau dimuat")
        return self.model.predict(X)

    # ==============================================================
    # Evaluation
    # ==============================================================
    def evaluate(self, X_test, y_test):
        if not self.model:
            raise ValueError("Model belum dilatih")
        preds = self.model.predict(X_test)
        acc = accuracy_score(y_test, preds)
        self.logger.info(f"Evaluation result: accuracy={acc:.4f}")
        return {"accuracy": acc}

    # ==============================================================
    # Save & Load
    # ==============================================================
    def save(self, filename="model.pkl"):
        path = os.path.join(self.save_dir, filename)
        joblib.dump(self.model, path)
        self.logger.info(f"Model saved to {path}")
        return path

    def load(self, filepath):
        if not os.path.exists(filepath):
            raise FileNotFoundError(filepath)
        self.model = joblib.load(filepath)
        self.logger.info(f"Model loaded from {filepath}")
        return self.model